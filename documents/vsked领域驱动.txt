

领域驱动设计应当是与技术架构无关的，里面的业务不应当依赖于技术架构，比如spring的注入。
html,js,css分离的
代码与数据应当是分离的，代码里不应当出现sql脚本
代码与配置应当是分享的，配置不应当写在代码中，这样变更会复杂

领域模型不应当只有属性，需要有丰富的行为
应当面向接口编程
读写应当使用不同模式来进行如CQRS


在某些情况下，最清楚、最实用的设计会包含一些特殊的操作，这些操作从概念上讲不属于任何对象。与其把它们强制地归于哪一类，不如顺其自然地在模型中引入一种新的元素，这就是Service（服务)。



领域
子域
核心域
通用域
支撑域



聚合根
实体
值对象


模块
模块内组织结构
领域对象，领域服务，领域资源库，防腐层

目录结构
com
└─company
    └─team
        └─bussiness
            ├─domain   领域相关
            │  ├─model  领域模型相关
            │  │  ├─aggregate 聚合根
            │  │  ├─entity 实体
            │  │  └─valobj 值对象
            │  ├─repo 资源库
            │  └─service 聚合根服务
            ├─facade 防腐层
            ├─service 领域服务
            ├─utils 工具类
            └─web
